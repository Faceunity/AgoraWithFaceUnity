cmake_minimum_required(VERSION 3.6)

set(PROJECT_NAME AgoraWithFaceUnity)
project(${PROJECT_NAME})

file(GLOB_RECURSE All_SOURCES ${CMAKE_CURRENT_LIST_DIR}/*.h 
                              ${CMAKE_CURRENT_LIST_DIR}/*.mm 
                              ${CMAKE_CURRENT_LIST_DIR}/*.hpp 

if(MSVC)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-DUSE_STATIC_LIB_WIN)
    add_compile_options(/W1)
    if (NAMA_BUILD_SHARED_LIB)
        add_definitions(-DNAMA_BUILD_SHARED_LIB)
    endif()
    #new version duk Date.now compile option
    add_definitions(-DDUK_USE_DATE_NOW_WINDOWS)
    set(DLL_VERSIONINFO_RC "${CMAKE_BINARY_DIR}/VersionInfo.rc")
    configure_file("${CMAKE_CURRENT_LIST_DIR}/../toolchain/win/VersionInfo.rc.in"
                   "${DLL_VERSIONINFO_RC}")
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --std=c++11")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3 -frtti -fexceptions")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fexceptions -std=c99")
    if(ANDROID)
        if(${CMAKE_ANDROID_ARCH_ABI} STREQUAL "x86")
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DANDROID_X86")
        elseif(${CMAKE_ANDROID_ARCH_ABI} STREQUAL "x86_64")
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DANDROID_X86 -DANDROID_X64")
        else()
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DANDROID_ARM -DHAS_NEON")
            if(${CMAKE_ANDROID_ARCH_ABI} STREQUAL "armeabi-v7a")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfloat-abi=softfp -mfpu=neon")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfloat-abi=softfp -mfpu=neon")
            else()
                #set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=armv8-a")
            endif()
        endif()
    endif()
endif()

#include_directories(${CMAKE_CURRENT_LIST_DIR}/../libs/CNamaSDK.framework/Release)
link_directories(${CMAKE_CURRENT_LIST_DIR}/../libs/CNamaSDK.framework/Release)
link_directories(${CMAKE_CURRENT_LIST_DIR}/../libs)
add_library(${PROJECT_NAME} SHARED ${All_SOURCES})
if (IOS)
    target_link_libraries(${PROJECT_NAME} "-framework OpenGLES")
    target_link_libraries(${PROJECT_NAME} "-framework Accelerate")
    target_link_libraries(${PROJECT_NAME} "-framework CNamaSDK")
    target_link_libraries(${PROJECT_NAME} "-framework AgoraRtcKit")
elseif(APPLE)
    target_link_libraries(${PROJECT_NAME} "-framework OpenGLES")
    target_link_libraries(${PROJECT_NAME} "-framework Accelerate")
    target_link_libraries(${PROJECT_NAME} "-framework AVFoundation")
    target_link_libraries(${PROJECT_NAME} "-framework CoreMedia")
    target_link_libraries(${PROJECT_NAME} "-framework CoreVideo")
    target_link_libraries(${PROJECT_NAME} "-framework CoreGraphics")
    target_link_libraries(${PROJECT_NAME} "-framework AppKit")
    target_link_libraries(${PROJECT_NAME} "-framework CNamaSDK")
    target_link_libraries(${PROJECT_NAME} "-framework AgoraRtcKit")
endif()


